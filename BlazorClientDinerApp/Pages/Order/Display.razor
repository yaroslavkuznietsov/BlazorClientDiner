@page "/Order/Display/{Id:int}"
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3>Display</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (orderInfo.Order is null)
{
    <h4>Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@orderInfo.Order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@orderInfo.Order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", orderInfo.Order.Total)</td>
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@orderInfo.ItemPurchased</td>
            </tr>
            <tr>
                <td><strong>Quantity Ordered</strong></td>
                <td>@orderInfo.Order.Quantity</td>
            </tr>
            <tr>
                <td colspan="2">
                    @if (confirmDelete)
                    {
                        <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">
                            Cancel
                        </button>
                        <button class="btn btn-outline-danger" @onclick="HandleDeleteRecord">
                            Confirm Delete
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">
                            Delete Order
                        </button>
                    }
                </td>
            </tr>

        </tbody>
    </table>

    <EditForm Model="@orderUpdateModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@orderUpdateModel" />

        <div class="form-group">
            <label class="control-label">Name of the Order</label>
            <InputText @bind-Value="orderUpdateModel.OrderName" class="form-control" />
            <ValidationMessage For="@(() => orderUpdateModel.OrderName)" class="text-danger" />
        </div>
        <div class="form-group">
            <input type="submit" value="Update Order Name" class="btn btn-primary" />
        </div>
    </EditForm>
}



@code {
    [Parameter]
    public int Id { get; set; }

    private OrderResultModel orderInfo = new OrderResultModel();
    private OrderUpdateModel orderUpdateModel = new OrderUpdateModel();
    private string errorString;
    private bool confirmDelete = false;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync($"api/order/{Id}");

        if (response.IsSuccessStatusCode)
        {
            orderInfo = await response.Content.ReadFromJsonAsync<OrderResultModel>();
            orderUpdateModel.Id = orderInfo.Order.Id;
            orderUpdateModel.OrderName = orderInfo.Order.OrderName;
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync("api/order", orderUpdateModel);
            orderInfo.Order.OrderName = orderUpdateModel.OrderName;
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }

    private async Task HandleDeleteRecord()
    {
        HttpResponseMessage response = await Http.DeleteAsync($"api/order/{Id}");

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo($"food/list");
        }
        else
        {
            errorString = response.ReasonPhrase;
        }


    }
}
